{"version":3,"sources":["components/badges/Create.js","components/badges/Badges.js"],"names":["Create","props","useState","showModal","setShowModal","mac","setMac","nfc","setNfc","selectedOfficer","setSelectedOfficer","officers","useSelector","state","data","Array","from","employees","forEach","item","index","push","id","name","first_name","last_name","handleCallback","parentCallback","React","useEffect","size","show","onClose","centered","closeButton","style","border","className","value","placeholder","onChange","event","target","type","length","map","option","onClick","formData","FormData","append","FILE_API","post","then","res","swal","color","Badges","dispatch","useDispatch","showAssignModal","setShowAssignModal","modalData","setModalData","open","setOpen","age","setAge","badgeList","setBadgeList","handleClose","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","fire_reassign_modal","fetchEmployeesThunk","PUBLIC_API","get","success","console","log","element","nfc_number","Date","created_at","toLocaleDateString","user","md","class","variant","items","fields","key","_style","width","_classes","label","sorter","filter","primary","hover","striped","bordered","columnFilter","itemsPerPage","pagination","scopedSlots","Action","childData","Dialog","DialogTitle","DialogContent","TextField","required","defaultValue","FormControl","InputLabel","Select","labelId","MenuItem","DialogActions"],"mappings":"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","file":"static/js/17.a7318967.chunk.js","sourcesContent":["import { CCard, CCardBody, CFormGroup, CInput,CLabel, CSelect } from '@coreui/react'\r\nimport {\r\n    CModal,\r\n    CModalHeader,\r\n    CModalBody,CModalFooter,CButton\r\n  } from '@coreui/react'\r\nimport React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { FILE_API } from 'src/config'\r\nimport swal from 'sweetalert'\r\n\r\nconst Create =(props)=>{\r\n    const [showModal,setShowModal] = useState(true)\r\n    const [mac,setMac] = useState()\r\n    const [nfc,setNfc]=useState()\r\n    const [selectedOfficer,setSelectedOfficer]=useState()\r\n    const officers = useSelector(state => {\r\n        let data=[]\r\n        Array.from(state.employees.data).forEach((item,index)=>{\r\n            data.push({id:item.id,name:item.first_name+' '+item.last_name})\r\n        })\r\n        return data\r\n    })\r\n    const handleCallback = ()=>{\r\n        setShowModal(false)\r\n        props.parentCallback(false)\r\n    }\r\n    const assignBadge =()=>{\r\n        var formData = new FormData();\r\n        formData.append(\"nfc_number\", nfc);\r\n        formData.append(\"mac_address\", mac); // number 123456 is immediately converted to a string \"123456\"\r\n        formData.append(\"user\", selectedOfficer);\r\n        FILE_API.post('employee/badge/add/',formData).then((res)=>{\r\n            swal('Assigned!','New badge added and assigned','success').then(()=>{\r\n                handleCallback()\r\n            })\r\n        })\r\n    }\r\n    React.useEffect(()=>{\r\n        if(props.data){\r\n            setNfc(props.data['Badge Number'])\r\n        }\r\n    },[showModal])\r\n    return(\r\n        <>\r\n        <CModal size=\"lg\" show={showModal} onClose={handleCallback} centered>\r\n            <CModalHeader closeButton><h3>Create a new badge and Assign to an officer</h3></CModalHeader>\r\n            <CModalBody>\r\n                <CCard style={{border:\"none\"}}>\r\n                    <CCardBody>\r\n                        <CFormGroup className=\"mb-3\">\r\n                            <CLabel>NFC</CLabel>\r\n                            <CInput value={nfc} placeholder=\"Enter new NFC number\" onChange={(event)=>setNfc(event.target.value)} type=\"text\"  />\r\n                        </CFormGroup>\r\n                        <CFormGroup className=\"mb-3\">\r\n                            <CLabel>Registration No</CLabel>\r\n                            <CInput value={mac} placeholder=\"Enter registration no\" onChange={(event)=>setMac(event.target.value)} type=\"text\"  />\r\n                        </CFormGroup>\r\n                        <CFormGroup className=\"mb-3\">\r\n                            <CLabel>Officer</CLabel>\r\n                            <CSelect value={selectedOfficer} onChange={(event)=>setSelectedOfficer(event.target.value)}>\r\n                                {officers.length>0 && Array.from(officers).map((option)=>(<option key={option.id} value={option.id}>{option.name}</option>))}\r\n                            </CSelect>\r\n                        </CFormGroup>\r\n                    </CCardBody>\r\n                </CCard>\r\n            </CModalBody>\r\n            <CModalFooter>\r\n                <CButton onClick={assignBadge} color=\"primary\">Assign</CButton>{' '}\r\n                <CButton onClick={handleCallback} color=\"secondary\">Cancel</CButton>\r\n            </CModalFooter>\r\n        </CModal>\r\n        {/* <CContainer>\r\n            <CRow className=\"justify-content-center\">\r\n                <CCol md=\"8\">\r\n                    <CCard>\r\n                        <CCardHeader>\r\n\r\n                        </CCardHeader>\r\n                    </CCard>\r\n                </CCol>\r\n            </CRow>\r\n        </CContainer> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Create","import React, { useState } from \"react\";\r\nimport \"./badges.css\";\r\nimport { CIcon } from \"@coreui/icons-react\";\r\nimport {\r\n  CForm,\r\n  CInput,\r\n  CCard,\r\n  CRow,\r\n  CCol,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CDataTable,\r\n  CContainer,\r\n  CButton,\r\n} from \"@coreui/react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { PUBLIC_API } from \"src/config\";\r\nimport Create from \"./Create\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchEmployeesThunk } from \"src/store/slices/EmployeesSlice\";\r\nimport swal from \"sweetalert\";\r\n\r\n\r\nconst Badges = () => {\r\n  const dispatch = useDispatch()\r\n  const [showAssignModal,setShowAssignModal] = useState(false)\r\n  const [modalData,setModalData] = useState()\r\n  const [open, setOpen] = React.useState(false);\r\n  const [age, setAge] = React.useState(\"\");\r\n  const [badgeList,setBadgeList] = useState([])\r\n  const useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }));\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  \r\n  const handleChange = (event) => {\r\n    setAge(event.target.value);\r\n  };\r\n  function handleCallback  (childData) {\r\n    setShowAssignModal(childData)\r\n  }\r\n  function fire_assign_modal(){\r\n    setModalData(null)\r\n    setShowAssignModal(true)\r\n  }\r\n  function fire_reassign_modal(data){\r\n    // setModalData(data)\r\n    // setShowAssignModal(true)\r\n    swal('Sorry!','This service is not available now','warning')\r\n  }\r\n  React.useEffect(()=>{\r\n    dispatch(fetchEmployeesThunk())\r\n    PUBLIC_API.get('employee/badge/info/').then((res)=>{\r\n      if(res.data.success == \"True\"){\r\n        console.log(res.data.data)\r\n        var data=[];\r\n        for (let index = 0; index < res.data.data.length; index++) {\r\n            const element = res.data.data[index];\r\n            data.push({'#':index+1,id:element.id,\"Badge Number\":element.nfc_number,\"Created Date\":new Date(element.created_at).toLocaleDateString(),\"Assigned To\":element.user.first_name,\"Scans\":'',\"Global Scans\":\"\"});\r\n        }\r\n        setBadgeList(data);\r\n    }\r\n    })\r\n    \r\n  },[])\r\n\r\n  return (\r\n    <>\r\n      <CRow>\r\n        <CCol md=\"12\">\r\n          <CCard>\r\n            <CCardHeader>\r\n              <h4 className=\"table-header\">Badges</h4>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <div class=\"custom-header\">\r\n                <CForm className=\"d-flex custom-form mt-2 mb-2\">\r\n                  <CInput type=\"search\" className=\"me-2\" placeholder=\"Search\" />\r\n                  <CButton type=\"button\" color=\"primary\" variant=\"outline\">\r\n                    Search\r\n                  </CButton>\r\n                </CForm>\r\n                <CButton type=\"button\" className=\"button-primary-small\">\r\n                  Export\r\n                </CButton>\r\n              </div>\r\n\r\n              <CDataTable\r\n                items={badgeList}\r\n                fields={[\r\n                  {\r\n                    key: \"#\",\r\n                    _style: { width: \"5%\" },\r\n                    _classes: \"font-weight-bold\",\r\n                  },\r\n                  \"Badge Number\",\r\n                  \"Created Date\",\r\n                  \"Assigned To\",\r\n                  \"Scans\",\r\n                  \"Global Scans\",\r\n                  {\r\n                    key: \"Action\",\r\n                    label: \"\",\r\n                    _style: { width: \"12%\" },\r\n                    sorter: true,\r\n                    filter: false,\r\n                  },\r\n                ]}\r\n                primary\r\n                hover\r\n                striped\r\n                bordered\r\n                sorter\r\n                columnFilter\r\n                size=\"sm\"\r\n                itemsPerPage={10}\r\n                pagination\r\n                scopedSlots={{\r\n                  Action: (item) => (\r\n                    <td>\r\n                      <CButton\r\n                        onClick={() => {}}\r\n                        type=\"button\"\r\n                        size=\"sm\"\r\n                        color=\"danger\"\r\n                        onClick={()=>fire_reassign_modal(item)}\r\n                      >\r\n                        Delete\r\n                      </CButton>{\" \"}\r\n                      <CButton\r\n                        size=\"sm\"\r\n                        type=\"button\"\r\n                        color=\"primary\"\r\n                        id=\"dropdownMenu\"\r\n                        onClick={()=>fire_reassign_modal(item)}\r\n                      >\r\n                        Assign\r\n                      </CButton>\r\n                    </td>\r\n                  ),\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n\r\n        <CCol md=\"12\" class=\"button-holder\">\r\n          <CButton onClick={()=>fire_reassign_modal({})} className=\"button-primary assign-align\" type=\"button\">\r\n            Assign all unassigned\r\n          </CButton>\r\n          <CButton\r\n            type=\"button\"\r\n            className=\"button-primary add-align\"\r\n            id=\"dropdownMenu2\"\r\n            data-toggle=\"dropdown\"\r\n            aria-expanded=\"false\"\r\n            onClick={()=>{fire_assign_modal()}}\r\n          >\r\n            Add New <CIcon name=\"cil-plus\" size=\"xl\"></CIcon>\r\n          </CButton>\r\n          {showAssignModal && <Create parentCallback={()=>handleCallback()} data={modalData}/>}\r\n          <div class=\"dropdown\">\r\n            <div class=\"dropdown-menu mt-2\" aria-labelledby=\"dropdownMenu2\">\r\n              <button class=\"dropdown-item\" type=\"button\">\r\n                Buy New\r\n              </button>\r\n              <div class=\"dropdown-divider\"></div>\r\n              <button\r\n                type=\"button\"\r\n                class=\"dropdown-item\"\r\n                onClick={handleClickOpen}\r\n              >\r\n                Use Existing\r\n              </button>\r\n            </div>\r\n            {/* modal for form input */}\r\n            <Dialog\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby=\"form-dialog-title\"\r\n              className=\"d-block\"\r\n            >\r\n              <div className=\"modal-comp\">\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                  Use Existing Badge\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                  <form>\r\n                    <TextField\r\n                      required\r\n                      id=\"standard-required\"\r\n                      label=\"Card ID\"\r\n                      defaultValue=\"Hello World\"\r\n                      className=\"d-block\"\r\n                    />\r\n                    <FormControl className=\"w-100 mt-2\">\r\n                      <InputLabel id=\"demo-simple-select-label\">\r\n                        Product Type\r\n                      </InputLabel>\r\n                      <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={age}\r\n                        onChange={handleChange}\r\n                      >\r\n                        <MenuItem value={10}>Product1</MenuItem>\r\n                        <MenuItem value={20}>Product2</MenuItem>\r\n                        <MenuItem value={30}>Product3</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </form>\r\n                </DialogContent>\r\n                <DialogActions className=\"justify-content-center\">\r\n                  <CButton\r\n                    onClick={handleClose}\r\n                    color=\"primary\"\r\n                    className=\"button-primary px-4 mt-2\"\r\n                  >\r\n                    Submit\r\n                  </CButton>\r\n                </DialogActions>\r\n              </div>\r\n            </Dialog>\r\n          </div>\r\n        </CCol>\r\n      </CRow>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Badges;\r\n"],"sourceRoot":""}